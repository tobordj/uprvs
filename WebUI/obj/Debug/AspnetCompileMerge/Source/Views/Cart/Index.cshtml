@model uh365898_db.WebUI.Models.CartIndexViewModel

@{
    ViewBag.Title = "";
}


<div class="row-fluid">
    <div class="span12">
        <div class="stepmenu">
            <ul class="breadcrumb">
                <li><a href="~/">Главная </a><span class="divider">/</span></li>
                <li><a href="~/Каталог">Каталог</a><span class="divider">/</span></li>

                <li class="active"> Корзина покупок </li>

            </ul>
        </div>
    </div>
</div>


    <div class="row-fluid">

    <div class="social-box">
        <div class="header"><span class="icon32  icon-arrowstop-e"></span>Корзина покупок</div>
    </div>
</div>

@if (Model.Cart.ComputeTotalValue().ToString() == "0")
{
    <div class="row-fluid">

        <div class="span12">
            <p class="a7">Ваша корзина покупок  пуста</p>
        </div>

        <div id="clear">
            &nbsp; &nbsp;
        </div>
        <div id="cartbutton1">
            <p class="cartbutton1">
                <a href="@Url.Action("Shop", "Product") ">Продолжить покупки</a>
            </p>
        </div>
    </div>
}


else
{
        <!-- Tables -->
    
          
                <div class="row-fluid">

                    @if (TempData["message"] != null)
                    {
                        <div class="alert alert-info"><p>@TempData["message"]</p></div>
                    }
                    <div class="span12">
                        <table class="table table-condensed" width="95%">
                            <thead class="table-cart">

                                <tr>
                                    <th> </th>
                                    <th>Категория</th>
                                    <th>Товар</th>
                                    <th>Количество</th>
                                    <th>Цена</th>
                                    <th>Всего</th>
                                    <th> </th>

                                </tr>
                            </thead>
                            <tbody class="table-cart">
                                @foreach (var line in Model.Cart.Lines)
                                {
                                    
                                    
                                    <tr>
                                        <td align="center">
                                            @if (line.Product.ImageData != null)
                                            {
                                                <div class="hover_img">
                                                    <p style="text-align: center;"><img style="align-content:center" width="75" height="75" src="@Url.Action("GetImage", "Product", new { line.Product.ProductID })" alt="" /></p>
                                                    <span class="portfolio_zoom">
                                                        <a href="@Url.Action("GetImage", "Product", new { line.Product.ProductID })" rel="prettyPhoto[portfolio1]"></a>
                                                    </span>
                                                </div>
                                            }
                                            @if (line.Product.ImageData == null)
                                            {
                                                <div class="hover_img">
                                                    <p style="text-align: center;"><img style="align-content:center" width="75" height="75" src="~/Content/themes/img/no_image.jpg" alt="" /></p>

                                                </div>
                                            }

                                        </td>
                                        <td>@line.Product.Categone.Name</td>
                                        <td>@Html.RouteLink(line.Product.Name, new { controller = "Product", action = "Store", ProductID=line.Product.ProductID })</td>
                                        <td align="center">
                                         @using (Html.BeginForm("UpdateCart", "Cart", FormMethod.Post, new { enctype = "multipart/form-data", onChange = "this.form.submit();" }))
                                         {
                                     
                                            

                                                @Html.ValidationSummary(true)
                                                @Html.AntiForgeryToken()
                                             
                                                @Html.Hidden("ProductId", line.Product.ProductID)
    @Html.ValidationMessageFor(model => line.Quantity)
    <input onchange="this.form.submit()" value="@line.Quantity" data-val="true" required class="text-box single-line" min="1" max="10" data-val-length-max="2" data-val-length-min="1" data-val-length="Количество должно быть от 1 до 2 символов" data-val-required="Пожалуйста, введите количество" data-val-number="Количество должно быть числом" data-val-range="Количество должно быть до 10" data-val-range-max="10" data-val-range-min="1" name="Quantity" id="Quantity" style="width:50px; font-size: 0.9em!important;" type="number" errormessage="количество должно быть числом ">


                                         }
</td>
                                        <td>@line.Product.Price грн.</td>
                                        <td>@((line.Quantity * line.Product.Price))грн.</td>

                                        <td>
                                           
                                            @using (Html.BeginForm("RemoveFromCart", "Cart"))
                                            {    @Html.Hidden("Quantity", line.Quantity)
                                                @Html.Hidden("ProductId", line.Product.ProductID)
                                                @Html.HiddenFor(x => x.ReturnUrl)
                                                
                                                <input class="cartbutton5" type="submit" value="X" />
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot class="table-cart">
                                <tr>
                                    <td> </td>
                                    <td> </td>
                                    <td> </td>
                                    <td> </td>
                                    <td>Итого:</td>
                                    <td>@Model.Cart.ComputeTotalValue()
 </td>
                                   
                                    <td> </td>
                                </tr>
                            </tfoot>


                        </table>

                    </div>
                </div>

                <div class="row-fluid">

                    <div class="span10">
                        <div class="row-fluid">
                            <div class="span6"> </div>
                            <div class="span4">

                                <div id="cartbutton1">
                                    <p class="cartbutton1">
                                        <a href="@Model.ReturnUrl">Продолжить покупки</a>
                                    </p>
                                </div>
                            </div>
                            <div class="span2">
                                <div id="cartbutton2">
                                    <p class="cartbutton2">
                                          @Html.ActionLink("Оформить заказ", "Checkout")
                                        <!-- генерирует ссылку, нажатие на которую вызывает метод действия Checkout контроллера Cart.   -->
                                    </p>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="span2"> </div>
                </div>


}






<!--
    <a class="editable editable-click" href="#" id="quantity" data-type="text" data-pk="1" data-url="/post" data-title="Enter Quantity">
     Мы можем использовать строго типизированный вспомогательный метод Html.HiddenFor,
    чтобы создать скрытое поле для свойства модели ReturnUrl,
     но мы должны использовать строко-ориентированный вспомогательный метод Html.Hidden,
    чтобы сделать то же самое для поля Product ID. Если мы запишем Html.HiddenFor(x => line.Product.ProductID),
    вспомогательный метод визуализирует скрытое поле под названием line.Product.ProductID. Имя поля не будет совпадать
     с именами параметров метода действия CartController.RemoveFromCart, из-за чего механизмы связывания по умолчанию
    не будут работать и MVC Framework не сможет вызвать метод.-->
